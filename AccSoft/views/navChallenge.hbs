<div class="container">
    <div class="py-5 d-flex justify-content-center">
        <div class="col-md-10">
            <h1>Desafío sobre la Operabilidad</h1>
        </div>
        <div class="col-md-2 p-1">
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal">
                ¿Necesitas ayuda?
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="div" id="timer-container"></div>
        </div>
        <div class="col-md-4">
            <div class="div" id="score-container"></div>
        </div>
        <div class="col-md-4">
            <p id="highscore">Máxima puntuación: {{highscore}}</p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div id="alarm" class="d-flex justify-content-center text-center"></div>
        </div>
        <div class="col-md-4">
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary" id="next"  style="display: none;" onclick="nextChallenge()">Siguiente desafío</button>
            </div>
        </div>
    </div>
    <div class="row">
        <h5>Desafío: Reorganiza y etiqueta los enlaces de navegación</h5>
    </div>
    <div class="row">
        <hr>
    </div>
    <div class="row">
            <div class="col-md-6">
                <p>Esta barra de navegación carece de los atributos ARIA correspondientes, lo cual dificulta su navegación para diferentes usuarios. Para solucionarlo,
                sigue los siguientes pasos:</p>
                <ol>
                    <li>Añade un rol adecuado para este elemento.</li>
                    <li>Así como también proporciona una etiqueta descriptiva para el menú de navegación.</li>
                    <li>
                       Ejemplo: &lt;nav id=&quot;nav&quot; role=&quot;X&quot; aria-label=&quot;X&quot;&gt;&lt;/nav&gt;
                    </li>
                </ol>
            </div>
            <!-- As a heading -->
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-12">
                        <h5>Menú de Navegación</h5>
                    </div>
                </div>
                <div class="row">
                    <nav id="navBar" class="navbar bg-primary">
                        <span class="navbar-brand mb-0 h1 " id="navBar">Desafío Estructura</span>
                        <a class="nav-link" href="#" id="viaje" tabindex="3">Viaje</a>
                        <a class="nav-link" href="#" id="restaurantes" tabindex="1">Restaurantes</a>
                        <a class="nav-link" href="#" id="comida" tabindex="2">Comida</a>
                        <a class="nav-link" href="#" id="explorar" tabindex="4">Explorar</a>
                    </nav>
                </div>
                <div class="row">
                    <form class="form m-2" id="navigationForm">
                    <div class="row">
                        <label class="label" for="navigationInput">Estructura del Menú de Navegación:</label>
                        <textarea id="navigationInput" rows="8" cols="30" placeholder="Ingrese aquí la estructura HTML del menú de navegación reorganizado y etiquetado..."></textarea>
                    </div>
                    <div class="row">
                        <button class="btn btn-primary btn-lg m-2" type="submit">Verificar</button>
                    </div>
                </form>
                </div>
                
            </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Información útil</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
               <h2>Etiquetas ARIA según las pautas de la WCAG</h2>
                <p>Las Pautas de Accesibilidad para el Contenido Web (WCAG) recomiendan el uso de ARIA (Accessible Rich Internet Applications) para mejorar la accesibilidad de las aplicaciones web. ARIA proporciona una forma de agregar la información necesaria para que las tecnologías de asistencia puedan interactuar completamente con el contenido. Aquí hay algunas recomendaciones:</p>
                <ul>
                    <li><strong>Roles ARIA:</strong> Los roles ARIA describen el tipo de widget que se está utilizando (como 'button', 'menu' o 'dialog') o la estructura de la página (como 'main', 'navigation' o 'footer'). En tu modal, ya estás utilizando el role 'dialog'.</li>
                    <li><strong>Propiedades y estados ARIA:</strong> Las propiedades y estados ARIA proporcionan información adicional que no puede ser obtenida del DOM, como si un menú está expandido o colapsado, o el valor actual de una barra de progreso.</li>
                    <li><strong>Etiquetas ARIA:</strong> Las etiquetas ARIA se utilizan para proporcionar una etiqueta accesible cuando la etiqueta visible no es suficiente. En tu modal, estás utilizando 'aria-labelledby' para asociar el título del modal con el modal mismo, y 'aria-hidden' para indicar que el modal está oculto cuando no está activo.</li>
                </ul>
                <p>En este desafío, debes asegurarte de que estás utilizando correctamente las etiquetas ARIA para hacer tu modal accesible.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>

            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>

<script>
     var perceptibilidad = [
        '/challenges/contrastChallenge',
        '/challenges/contrastChallenge2',
        '/challenges/altChallenge',
        '/challenges/subtitlesChallenge',
    ];
    var operabilidad = [
        '/challenges/structureChallenge',
        '/challenges/structureChallenge2',
    ];
    var comprensibilidad = [
        '/challenges/formChallenge',
        '/challenges/formChallenge2',
    ];
    var robustez = [
        '/challenges/altChallenge2',
        '/challenges/keyboardChallenge',
    ];

    // Almacena los desafíos que el usuario ya ha jugado en el almacenamiento local
    var playedChallenges = JSON.parse(localStorage.getItem('playedChallenges')) || [];

       function nextChallenge() {
        document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">Avanzando al siguiente desafío</div>';
        if (!playedChallenges.includes(window.location.pathname)) {
            playedChallenges.push(window.location.pathname);
            localStorage.setItem('playedChallenges', JSON.stringify(playedChallenges));
        }
        if (playedChallenges.length < 4) {

            // Genera un número aleatorio entre 0 y el número de desafíos restantes
            var nextChallengeIndex = Math.floor(Math.random() * comprensibilidad.length);

            // Redirige al usuario al desafío seleccionado
            var nextChallenge = comprensibilidad[nextChallengeIndex];
            window.location.href = nextChallenge;
        } else {
            document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">¡Desafío completado con éxito! Con puntuación de ' + totalScore + '</div>';
            // Borra la lista de desafíos jugados
            playedChallenges = [];
            localStorage.removeItem('playedChallenges');
            if (totalScore > {{ highscore }} ) {
            fetch('/challenges/updateHighscore', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    highscore: totalScore,
                }),
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Highscore updated:', data);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        }
        localStorage.setItem('score', 0);
        window.location.href = "/";
    }   
    }

    document.getElementById('navigationForm').addEventListener('submit', function (event) {
        event.preventDefault();
        alert("hola");
        var Input = document.getElementById('navigationInput').value;
        var role = Input.match(/role="([^"]+)"/)[1];
        alert(role);
        var aria = Input.match(/aria-label="([^"]+)"/)[1];
        if(role != 'navigation'){
            document.getElementById("alarm").innerHTML = '<div class="alert alert-danger" role="alert">El rol de la barra de navegación no coincide con el que has incluido.</div>'; 
            return;
        }  
        if (aria != 'Menú de navegación' && aria != 'Menú de navegación principal' && aria != 'Menú de navegación principal de la página' && aria != 'Navigation menu' && aria != 'Menu de navegacion' && aria != 'Menu principal'){
            document.getElementById("alarm").innerHTML = '<div class="alert alert-danger" role="alert">El aria-label de la barra de navegación que ser lo suficientemente descriptiva.</div>'; 
            return;
        }
            document.getElementById("next").style.display = "block";
            var newScore = obtenerPuntuación(timerValueWhenConditionMet);
            var score = parseInt(localStorage.getItem('score')) + newScore;
            localStorage.setItem('score', score);
            clearInterval(timerInterval);
            document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">¡Estructura de menú de navegación correcta!</div>';
            document.getElementById("score-container").innerText = 'Puntuación: ' + score;
    });

    
</script>
<script>


    function obtenerPuntuación(timerTriggered) {
        return Math.floor(1000 / timerTriggered);
    }

    var startTime, timerInterval, timerValueWhenConditionMet;


    function updateTimer() {

        var currentTime = Date.now();
        var elapsedTime = Math.floor((currentTime - startTime) / 1000);
        timerValueWhenConditionMet = elapsedTime;


        document.getElementById("timer-container").innerText = 'Tiempo de partida: ' + elapsedTime + ' segundos';
    }
    document.getElementById("score-container").innerText = 'Puntuación: ' + localStorage.getItem('score');

    function startTimer() {
        // Guarda el tiempo de inicio
        startTime = Date.now();

        // Inicia el temporizador para que llame a updateTimer cada 1000 milisegundos (1 segundo)
        timerInterval = setInterval(updateTimer, 1000);
    }

    // Inicia el temporizador cuando se carga la página
    startTimer();
</script>