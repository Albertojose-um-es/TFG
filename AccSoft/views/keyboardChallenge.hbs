<div class="container">
    <div class="py-5 d-flex justify-content-center">
        <div class="col-md-10">
            <h1>Desafío sobre la accesibilidad en formularios</h1>
        </div>
        <div class="col-md-2 p-1">
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal">
                ¿Necesitas ayuda?
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="div" id="timer-container"></div>
        </div>
        <div class="col-md-4">
            <div class="div" id="score-container"></div>
        </div>
        <div class="col-md-4">
            <p id="highscore">Máxima puntuación: {{highscore}}</p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div id="alarm" class="d-flex justify-content-center text-center"></div>
        </div>
        <div class="col-md-4">
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary" id="next"  style="display: none;" onclick="nextChallenge()">Siguiente desafío</button>
            </div>
        </div>
    </div>
    <div class="row">
        <h5>Esta barra de navegación tiene elementos que solo son accesibles mediante el mouse, arreglalo para que sea accesible también por teclado.
        </h5>
    </div>
    <div class="row">
        <hr class="my-4">
    </div>
    <div class="row">
        <nav class="navbar bg-dark border-bottom border-body" data-bs-theme="dark">
            <a class="navbar-brand" href="#" tabindex="1" id="campo1">Desafío de accesibilidad</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="#" tabindex="2" id="campo2">Home</a>
                </li>
                <li class="nav-item">
                <a class="nav-link" href="#" tabindex="3" id="campo3">Mis productos</a>
                </li>
                <li class="nav-item">
                <a class="nav-link" href="#" tabindex="4" id="campo4">Explorar</a>
                </li>
                <li class="nav-item">
                <a class="nav-link" href="#" tabindex="5" id="campo5">Servicio al cliente</a>
                </li>
            </ul>
            </div>
        </nav>
    </div>
    <div class="row">
        <div class="col-md-12">
                <p>Reglas de este desafío:</p>
                <ol>
                    <li>Etiqueta cada enlace con el id "campo" más el número del elemento (1-5).</li>
                    <li>Asegurate de usar las etiquetas HTML correctas.</li>
                    <li>Usa el atributo tabindex para reorganizarlo.</li>
                    <li>Separa cada elemento con un salto de línea </li>
                    <li>
                       Ejemplo: &lt;nav id=&quot;campoX&quot; tabindex=&quot;X&quot;&gt;Nombre&lt;/nav&gt;
                    </li>
                </ol>
            <form id="formKeyboard">
                <div class="mb-3">
                    <label for="getId" class="form-label">Introduce aquí el código html</label>
                    <input type="text" class="form-control" id="getId" name="getId" required>
                </div>
                <button type="submit" class="btn btn-primary">Enviar</button>
            </form>
        </div>
    </div>
    <div class="row">
        <hr class="my-4">
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Información útil</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h2>Accesibilidad del teclado según las pautas de la WCAG</h2>
                <p>Las Pautas de Accesibilidad para el Contenido Web (WCAG) establecen que todo el contenido funcional debe ser operable a través del teclado. Esto permite que las personas que no pueden usar un ratón o tienen una discapacidad física puedan interactuar con el contenido web. Aquí hay algunas recomendaciones:</p>
                <ul>
                    <li><strong>Tabulación y orden de foco:</strong> Los usuarios deben poder navegar a todos los elementos interactivos de una página usando solamente el teclado. El orden de tabulación debe ser lógico y predecible, generalmente siguiendo el flujo visual de la página.</li>
                    <li><strong>Indicador de foco visible:</strong> Debe haber un indicador de foco visible para ayudar a los usuarios a entender en qué elemento de la página está el foco en un momento dado.</li>
                    <li><strong>No atrapar el foco del teclado:</strong> Evita las situaciones en las que el foco del teclado queda atrapado en una parte específica de la página y el usuario no puede salir de esa área o moverse a otros contenidos.</li>
                    <li><strong>Funcionalidad de teclado completa:</strong> Si un elemento tiene funcionalidad adicional (como un menú desplegable), esa funcionalidad debe ser operable a través del teclado.</li>
                </ul>
                <p>En este desafío, debes asegurarte de que todos los elementos de la barra de navegación sean accesibles a través del teclado y que el orden de tabulación sea lógico y predecible.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>

            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script>
     var perceptibilidad = [
        '/challenges/contrastChallenge',
        '/challenges/contrastChallenge2',
        '/challenges/altChallenge',
        '/challenges/subtitlesChallenge',
    ];
    var operabilidad = [
        '/challenges/structureChallenge',
        '/challenges/structureChallenge2',
    ];
    var comprensibilidad = [
        '/challenges/formChallenge',
        '/challenges/formChallenge2',
    ];
    var robustez = [
        '/challenges/altChallenge2',
        '/challenges/keyboardChallenge',
    ];

    // Almacena los desafíos que el usuario ya ha jugado en el almacenamiento local
    var playedChallenges = JSON.parse(localStorage.getItem('playedChallenges')) || [];

   var randomNumbers = [];
for (var i = 0; i < 3; i++) {
    var randomNumber;
    do {
        randomNumber = Math.floor(Math.random() * 5) + 1;
    } while (randomNumbers.includes(randomNumber));
    randomNumbers.push(randomNumber);
}
document.getElementById("campo"+randomNumbers[0]).setAttribute('tabindex', -1);
document.getElementById("campo"+randomNumbers[1]).setAttribute('tabindex', -1);
document.getElementById("campo"+randomNumbers[2]).setAttribute('tabindex', -1);
    
       function nextChallenge() {
        document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">Avanzando al siguiente desafío</div>';
        if (!playedChallenges.includes(window.location.pathname)) {
            playedChallenges.push(window.location.pathname);
            localStorage.setItem('playedChallenges', JSON.stringify(playedChallenges));
        }
        if (playedChallenges.length < 4) {

            // Genera un número aleatorio entre 0 y el número de desafíos restantes
            var nextChallengeIndex = Math.floor(Math.random() * perceptibilidad.length);

            // Redirige al usuario al desafío seleccionado
            var nextChallenge = perceptibilidad[nextChallengeIndex];
            window.location.href = nextChallenge;
        } else {
            document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">¡Desafío completado con éxito! Con puntuación de ' + totalScore + '</div>';
            // Borra la lista de desafíos jugados
            playedChallenges = [];
            localStorage.removeItem('playedChallenges');
            if (totalScore > {{ highscore }} ) {
            fetch('/challenges/updateHighscore', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    highscore: totalScore,
                }),
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Highscore updated:', data);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        }
        localStorage.setItem('score', 0);
        window.location.href = "/";
    }   
    }

    document.getElementById('formKeyboard').addEventListener('submit', function (event) {
        event.preventDefault();
        var keyboardInput = document.getElementById('getId').value;
        if(keyboardInput == ""){
            document.getElementById("alarm").innerHTML = '<div class="alert alert-danger" role="alert">¡Por favor, ingrese una respuesta!</div>';
        }
        // Split the keyboard input by new lines
        var keyboardLines = keyboardInput.split('\n');
        // Iterate over each line
        for (var i = 0; i < keyboardLines.length; i++) {
            // Extract the id and tabindex from the line
            var id = keyboardLines[i].match(/id="([^"]+)"/)[1];
            var tabindex = keyboardLines[i].match(/tabindex="([^"]+)"/)[1];
            document.getElementById(id).setAttribute('tabindex', tabindex);
            document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">Elemento '+ id+' actualizado</div>'; 
        }
        if (document.getElementById("campo1").tabIndex == 1 && document.getElementById("campo2").tabIndex == 2 && document.getElementById("campo3").tabIndex == 3 && document.getElementById("campo4").tabIndex == 4 && document.getElementById("campo5").tabIndex == 5){
            document.getElementById("next").style.display = "block";
            var newScore = obtenerPuntuación(timerValueWhenConditionMet);
            var score = parseInt(localStorage.getItem('score')) + newScore;
            localStorage.setItem('score', score);
            clearInterval(timerInterval);
            document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">¡Menú de navegación accesible!</div>';
            document.getElementById("score-container").innerText = 'Puntuación: ' + score;
        } else {
            //document.getElementById("alarm").innerHTML = '<div class="alert alert-danger" role="alert">¡Estructura de menú de navegación incorrecta!</div>';
        }
    });

    
</script>
<script>


    function obtenerPuntuación(timerTriggered) {
        return Math.floor(1000 / timerTriggered);
    }

    var startTime, timerInterval, timerValueWhenConditionMet;


    function updateTimer() {

        var currentTime = Date.now();
        var elapsedTime = Math.floor((currentTime - startTime) / 1000);
        timerValueWhenConditionMet = elapsedTime;


        document.getElementById("timer-container").innerText = 'Tiempo de partida: ' + elapsedTime + ' segundos';
    }
    document.getElementById("score-container").innerText = 'Puntuación: ' + localStorage.getItem('score');

    function startTimer() {
        // Guarda el tiempo de inicio
        startTime = Date.now();

        // Inicia el temporizador para que llame a updateTimer cada 1000 milisegundos (1 segundo)
        timerInterval = setInterval(updateTimer, 1000);
    }

    // Inicia el temporizador cuando se carga la página
    startTimer();
</script>