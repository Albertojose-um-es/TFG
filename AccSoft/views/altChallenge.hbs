<div class="container">
    <div class="py-5 d-flex justify-content-center">
        <div class="col-md-10">
            <h1>Desafío sobre el etiquetado alternativo</h1>
        </div>
        <div class="col-md-2 p-1">
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal">
                ¿Necesitas ayuda?
            </button>
        </div>    
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="div" id="timer-container"></div>
        </div>
        <div class="col-md-4">
            <div class="div" id="score-container"></div>
        </div>
        <div class="col-md-4">
            <p id="highscore">Máxima puntuación: {{highscore}}</p>
        </div>
    </div>
    <div class="row">
        <div class="gallery">
            <h5>Etiqueta las siguientes imágenes con texto alternativo para que sean accesibles para personas con
                discapacidad visual.</h5>
            <div class="row">
                <div class="col-md-4 image-container">
                <img id="image1" class="img-fluid py-2" src="/images/logo.jpg">
                <input id="altText1" type="text" placeholder="New alt info">
                <button class="applyAltText btn btn-primary py-2" data-image-id="image1" data-input-id="altText1">Aplicar
                    descripción</button>
            </div>
            <div class="col-md-4 image-container">
                <img id="image2" src="/images/ui.jpg" class="img-fluid py-2">
                <input id="altText2" type="text" placeholder="New alt info">
                <button class="applyAltText btn btn-primary py-2" data-image-id="image2" data-input-id="altText2">Aplicar
                    descripción</button>
            </div>
            <div class="col-md-4 image-container">
                <img id="image3" src="/images/forest.jpg" class="img-fluid py-2">
                <input id="altText3" type="text" placeholder="New alt info">
                <button class="applyAltText btn btn-primary py-2" data-image-id="image3" data-input-id="altText3">Aplicar
                    descripción</button>
            </div>
            </div>
        </div>
    </div>
    <div class="row">
        <hr class="my-4">
    </div>

</div>


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Información útil</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h2>Etiquetado alternativo según las pautas de la WCAG</h2>
                <p>Las Pautas de Accesibilidad para el Contenido Web (WCAG) recomiendan proporcionar texto alternativo
                    para todas las imágenes no textuales. Esto permite que las personas que utilizan lectores de
                    pantalla y las personas que han desactivado las imágenes en su navegador puedan entender el
                    contenido de las imágenes.</p>
                <p>El texto alternativo debe:</p>
                <ul>
                    <li>Ser preciso y equivalente en la presentación del mismo contenido que la imagen.</li>
                    <li>Ser breve. La mayoría de los expertos recomiendan alrededor de 125 caracteres o menos.</li>
                    <li>No contener palabras como "imagen de" o "gráfico de", ya que los lectores de pantalla ya
                        anuncian el tipo de elemento.</li>
                </ul>
                <p>Si la imagen es puramente decorativa y no aporta ninguna información, puedes dejar la etiqueta alt
                    vacía (por ejemplo, alt="").</p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>

            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script>
    var challenges = [
        '/challenges/contrastChallenge',
        '/challenges/contrastChallenge2',
        '/challenges/altChallenge',
        '/challenges/altChallenge2',
        '/challenges/structureChallenge',
        '/challenges/structureChallenge2',
        '/challenges/formChallenge',
        '/challenges/formChallenge2',
    ];

    // Almacena los desafíos que el usuario ya ha jugado en el almacenamiento local
    var playedChallenges = JSON.parse(localStorage.getItem('playedChallenges')) || [];

    var buttons = document.querySelectorAll('.applyAltText');
    buttons.forEach(function (button) {
        button.addEventListener('click', function () {
            var imageId = this.dataset.imageId;
            var inputId = this.dataset.inputId;
            var altText = document.getElementById(inputId).value;
            if (altText.trim() === '') {
                alert('Por favor, escribe una descripción para la imagen.');
            } else {
                document.getElementById(imageId).alt = altText;
                document.getElementById(inputId).value = '';
                alert('¡Alt actualizado con éxito! Desde inspeccionar la página puedes observar la nueva etiqueta.'); // Add this line to notify the player

                // Comprueba si todas las imágenes tienen etiquetas alt
                var images = document.querySelectorAll('.gallery img');
                var allImagesHaveAltTags = Array.from(images).every(img => img.hasAttribute('alt') && img.alt.trim() !== '');

                if (allImagesHaveAltTags) {
                    setTimeout(function () {

                        var newScore = obtenerPuntuación(timerValueWhenConditionMet);
                        var currentScore = parseInt(localStorage.getItem('score'));
                        var totalScore = currentScore + newScore;
                        localStorage.setItem('score', totalScore);
                        clearInterval(timerInterval);
                        alert('¡Desafío completado con éxito! Con puntuación de ' + totalScore);

                        if (!playedChallenges.includes(window.location.pathname)) {
                            playedChallenges.push(window.location.pathname);
                            localStorage.setItem('playedChallenges', JSON.stringify(playedChallenges));
                        }
                        if (playedChallenges.length < 3 && confirm('¿Quieres avanzar al siguiente desafío?')) {
                            alert('Avanzando al siguiente desafío...');

                            // Filtra los desafíos para excluir los que el usuario ya ha jugado
                            var remainingChallenges = challenges.filter(challenge => !playedChallenges.includes(challenge));

                            // Genera un número aleatorio entre 0 y el número de desafíos restantes
                            var nextChallengeIndex = Math.floor(Math.random() * remainingChallenges.length);

                            // Redirige al usuario al desafío seleccionado
                            var nextChallenge = remainingChallenges[nextChallengeIndex];
                            window.location.href = nextChallenge;
                        } else {
                            alert('Has jugado tres desafíos en esta partida. ¡Felicidades!');
                            // Borra la lista de desafíos jugados
                            playedChallenges = [];
                            localStorage.removeItem('playedChallenges');
                            if ( totalScore > {{highscore}} ) {
                                fetch('/challenges/updateHighscore', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        highscore: totalScore,
                                    }),
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        console.log('Highscore updated:', data);
                                    })
                                    .catch((error) => {
                                        console.error('Error:', error);
                                    });
                            }
                            localStorage.setItem('score', 0);
                            window.location.href = "/";
                        }
                    }, 2000); // Retrasa la alerta y las acciones subsiguientes en 2 segundos

                }
            }
        });
    });

    function obtenerPuntuación(timerTriggered) {
        return Math.floor(1000 / timerTriggered);
    }
</script>
<script>

    var startTime, timerInterval, timerValueWhenConditionMet;


    function updateTimer() {

        var currentTime = Date.now();
        var elapsedTime = Math.floor((currentTime - startTime) / 1000);
        timerValueWhenConditionMet = elapsedTime;


        document.getElementById("timer-container").innerText = 'Tiempo de partida: ' + elapsedTime + ' segundos';
    }
    document.getElementById("score-container").innerText = 'Puntuación: ' + localStorage.getItem('score');

    function startTimer() {
        // Guarda el tiempo de inicio
        startTime = Date.now();

        // Inicia el temporizador para que llame a updateTimer cada 1000 milisegundos (1 segundo)
        timerInterval = setInterval(updateTimer, 1000);
    }

    // Inicia el temporizador cuando se carga la página
    startTimer();
</script>