<div class="container">
    <div class="py-5 d-flex justify-content-center">
        <div class="col-md-10">
            <h1>Desafío sobre la robustez</h1>
        </div>
        <div class="col-md-2 p-1">
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal">
                ¿Necesitas ayuda?
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="div" id="timer-container"></div>
        </div>
        <div class="col-md-4">
            <div class="div" id="score-container"></div>
        </div>
        <div class="col-md-4">
            <p id="highscore">Máxima puntuación: {{highscore}}</p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div id="alarm" class="d-flex justify-content-center text-center"></div>
        </div>
        <div class="col-md-4">
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary" id="next"  style="display: none;" onclick="nextChallenge()">Siguiente desafío</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h4>El siguiente formulario no es accesible ya que los campos no tienen su nombre descriptivo.</h4>
        </div>
    </div>
    <div class="row">
        <hr>
    </div>
    <div class="row">
        <div class="card col-md-6">
            <div class="card-header">
                <h5>Formulario de contacto.</h5>
            </div>
            <div class="card-body">
                <form id="inputForm">
                    <div class="mb-3" id="nombre">
                        <input type="text" class="form-control" id="nameInput" placeholder="Escribe tu nombre aquí">
                    </div>
                    <div class="mb-3" id="email">
                        <input type="email" class="form-control" id="emailInput"
                            placeholder="Escribe tu correo electrónico aquí">
                    </div>
                    <div class="mb-3" id="mensaje">
                        <textarea class="form-control" id="messageInput" rows="3"
                            placeholder="Escribe tu mensaje aquí"></textarea>
                    </div>
                    <button type="button" id="applyLabels" class="btn btn-primary">Enviar información</button>
                </form>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Añadir los elementos</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <p>Para superar este desafío, debes añadir las etiquetas correspondientes a los campos del
                            formulario de contacto. Para ello, escribe en el siguiente cuadro de texto el código HTML necesario para añadir la
                            etiqueta correspondiente a cada campo del formulario.</p>
                        <p>Recuerda que el ID de la etiqueta debe coincidir con el ID del campo del formulario. Los ID de los diferentes campos del formulario son "nombre", "email" y "mensaje" respectivamente.</p>
                        <p>Ejemplo: &lt;label id=&quot;x&quot;&gt;X&lt;/label&gt;</p>
                        <form id="formLabel">
                            <label for="newLabel" class="form-label">Cambiar etiqueta:</label>
                            <textarea class="form-control" id="newLabel" rows="3"
                                placeholder="Escriba el nuevo nombre de la etiqueta"></textarea>
                            <button type="submit" class="btn btn-primary mt-2">Cambiar etiqueta</button>
                        </form>
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <hr class="my-4">
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Información útil</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h2>Etiquetado alternativo según las pautas de la WCAG</h2>
                <p>Las Pautas de Accesibilidad para el Contenido Web (WCAG) recomiendan proporcionar texto alternativo
                    para todas las imágenes no textuales. Esto permite que las personas que utilizan lectores de
                    pantalla y las personas que han desactivado las imágenes en su navegador puedan entender el
                    contenido de las imágenes.</p>
                <p>El texto alternativo debe:</p>
                <ul>
                    <li>Ser preciso y equivalente en la presentación del mismo contenido que la imagen.</li>
                    <li>Ser breve. La mayoría de los expertos recomiendan alrededor de 125 caracteres o menos.</li>
                    <li>No contener palabras como "imagen de" o "gráfico de", ya que los lectores de pantalla ya
                        anuncian el tipo de elemento.</li>
                </ul>
                <p>Si la imagen es puramente decorativa y no aporta ninguna información, puedes dejar la etiqueta alt
                    vacía (por ejemplo, alt="").</p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>

            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>

<script>
    var email = false;
    var message = false;
    var name = false;
    
    var perceptibilidad = [
        '/challenges/contrastChallenge',
        '/challenges/contrastChallenge2',
        '/challenges/altChallenge',
        '/challenges/subtitlesChallenge',
    ];
    var operabilidad = [
        '/challenges/structureChallenge',
        '/challenges/structureChallenge2',
    ];
    var comprensibilidad = [
        '/challenges/formChallenge',
        '/challenges/formChallenge2',
    ];
    var robustez = [
        '/challenges/altChallenge2',
        '/challenges/keyboardChallenge',
        //FONTISZE CHALLENGE NO VALID
        //'/challenges/fontSizeChallenge',
    ];
    // Almacena los desafíos que el usuario ya ha jugado en el almacenamiento local
    var playedChallenges = JSON.parse(localStorage.getItem('playedChallenges')) || [];
      
    // Función para iniciar el juego
    document.getElementById('formLabel').addEventListener('submit', function(event) {
    // Prevenir el comportamiento predeterminado del formulario
        event.preventDefault();
        var newLabel = document.getElementById('newLabel').value;
        if (newLabel === ""){
            document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">Por favor, escriba en el área de texto</div>';
        }
        var id = newLabel.match(/id="([^"]+)"/)[1];
        var nombre = newLabel.match(/>([^<]+)</)[1];
        if (id !== 'nombre' && id !== 'email' && id !== 'mensaje') {
            document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">El ID debe coincidir con uno de los valores permitidos: nombre, email o mensaje</div>';
            return;
        }
        if (id === 'nombre') {
            nombre1 = nombre.toLowerCase();
            if (nombre1 !== 'nombre') {
                document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">El nombre de la etiqueta debe ser descriptiva.</div>';
                return;
            }
            else
            {
                name = true;
            }
        } else if (id === 'email') {
                nombre1 = nombre.toLowerCase();
                if (nombre1 !== 'email' && nombre1 !== 'correo electrónico' && nombre1 !== 'correo') {
                    document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">El nombre de la etiqueta debe ser descriptiva.</div>';
                    return;
                }    
                else
                {
                    email = true;
                }
        } else if (id === 'mensaje') {
                nombre1 = nombre.toLowerCase();
                if (nombre1 !== 'mensaje') {
                    document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">El nombre de la etiqueta debe ser descriptiva.</div>';
                    return;
                }
                else
                {   
                    message = true;
                }
        }
        var labelElement = document.createElement('label');
        labelElement.innerText = nombre;
        var parentElement = document.getElementById(id);
        parentElement.insertBefore(labelElement, parentElement.firstChild);
        document.getElementById('alarm').innerHTML = '<div class="alert alert-success" role="alert">Etiqueta '+ nombre + ' añadida con éxito.</div>';
    });

    var checkWinInterval = setInterval(function() {
        if (name && email && message) {
            document.getElementById('next').style.display = 'block';
            document.getElementById('alarm').innerHTML = '<div class="alert alert-success" role="alert">¡Desafío completado con éxito!</div>';
            var newScore = obtenerPuntuación(timerValueWhenConditionMet);
            var currentScore = parseInt(localStorage.getItem('score'));
            var totalScore = currentScore + newScore;
            localStorage.setItem('score', totalScore);
            document.getElementById('score-container').innerText = 'Puntuación: ' + totalScore;
            clearInterval(checkWinInterval);
        }
    }, 1000); // Comprueba cada segundo

    function nextChallenge() {
        document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">Avanzando al siguiente desafío</div>';
        if (!playedChallenges.includes(window.location.pathname)) {
            playedChallenges.push(window.location.pathname);
            localStorage.setItem('playedChallenges', JSON.stringify(playedChallenges));
        }
        if (playedChallenges.length < 4) {

            // Genera un número aleatorio entre 0 y el número de desafíos restantes
            var nextChallengeIndex = Math.floor(Math.random() * perceptibilidad.length);

            // Redirige al usuario al desafío seleccionado
            var nextChallenge = perceptibilidad[nextChallengeIndex];
            window.location.href = nextChallenge;
        } else {
            document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">¡Desafío completado con éxito! Con puntuación de ' + totalScore + '</div>';
            // Borra la lista de desafíos jugados
            playedChallenges = [];
            localStorage.removeItem('playedChallenges');
            if (totalScore > {{ highscore }} ) {
            fetch('/challenges/updateHighscore', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    highscore: totalScore,
                }),
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Highscore updated:', data);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        }
        localStorage.setItem('score', 0);
        window.location.href = "/";
    }   
    }

    function obtenerPuntuación(timerTriggered) {
        return Math.floor(1000 / timerTriggered);
    }

</script>
<script>

    var startTime, timerInterval, timerValueWhenConditionMet;


    function updateTimer() {

        var currentTime = Date.now();
        var elapsedTime = Math.floor((currentTime - startTime) / 1000);
        timerValueWhenConditionMet = elapsedTime;


        document.getElementById("timer-container").innerText = 'Tiempo de partida: ' + elapsedTime + ' segundos';
    }
    document.getElementById("score-container").innerText = 'Puntuación: ' + localStorage.getItem('score');

    function startTimer() {
        // Guarda el tiempo de inicio
        startTime = Date.now();

        // Inicia el temporizador para que llame a updateTimer cada 1000 milisegundos (1 segundo)
        timerInterval = setInterval(updateTimer, 1000);
    }

    // Inicia el temporizador cuando se carga la página
    startTimer();
</script>