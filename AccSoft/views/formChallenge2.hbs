<div class="container">
    <div class="py-5 d-flex justify-content-center">
        <div class="col-md-10">
            <h1>Desafío sobre la Comprensibilidad</h1>
        </div>
        <div class="col-md-2 p-1">
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal">
                ¿Necesitas ayuda?
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="div" id="timer-container"></div>
        </div>
        <div class="col-md-4">
            <div class="div" id="score-container"></div>
        </div>
        <div class="col-md-4">
            <p id="highscore">Máxima puntuación: {{highscore}}</p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div id="alarm" class="d-flex justify-content-center text-center"></div>
        </div>
        <div class="col-md-4">
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary" id="next"  style="display: none;" onclick="nextChallenge()">Siguiente desafío</button>
            </div>
        </div>
    </div>
    <div class="row">
        <h5>Este formulario tiene mensajes de error ambiguos, cambia estos mensajes para que el formulario sea fácil
                de entender para todos los usuarios.
        </h5>
    </div>
    <div class="row">
        <hr class="my-4">
    </div>
    <div class="row">
            <div class="col-md-6">
                <div class="card text-start">
                    <h5 class="m-3">Incluye los datos de tu pedido.</h5>
                    <div class="card-body">
                        <form id="registrationForm" class="g-3 was-validation">
                            <div class="mb-3">
                                <label for="fullName" class="form-label">Nombre completo:</label>
                                <input type="text" class="form-control is-invalid" id="fullName" name="fullName" required minlength="3">
                                <div class="invalid-feedback" id="campo1">
                                    Introduza un nombre de al menos 3 carácteres de longitud.
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">Correo electrónico:</label>
                                <input type="email" class="form-control is-invalid" id="email" name="email" required>
                                <div class="invalid-feedback" id="campo2">
                                    El correo es obligatorio y debe tener un formato válido.
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Contraseña:</label>
                                <input type="password" class="form-control is-invalid" id="password" name="password" required minlength="8" >
                                <div class="invalid-feedback" id="campo3">
                                    La contraseña es obligatoria y debe tener al menos 8 caracteres.
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirmar contraseña:</label>
                                <input type="password" class="form-control is-invalid" id="confirmPassword" required minlength="8" name="confirmPassword" required>
                                <div class="invalid-feedback" id="campo4">
                                    Por favor, confirme su contraseña.
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary">Registrarse</button>
                        </form>

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row" id="rules-container">
                    <h5>Reglas para crear las alertas de comprobaciones en los formularios:</h5>
                    <ul>
                        <li> Debes escribir el elemento como: </li>
                        <li> "&lt;div class=&quot;invalid-feedback&quot; id=&quot;campoX&quot;&gt;Mensaje de error&lt;/div&gt;"</li>
                        <li> Donde X (1-4) es el número del campo donde quieres añadir ese mensaje</li>
                        <li> El mensaje de error debe ser descriptivo y útil para el usuario </li>
                        <li> Sabiendo que el nombre debe tener mínimo 3 carácteres y que el correo electrónico debe tener un formato válido.</li>
                        <li> Sabiendo además que la contraseña es obligatoria, debe tener al menos 3 carácteres y se debe confirmar.</li>
                        <li> Crea unos mensajes adecuados para ello.</li>
                    </ul>
                </div>
                <div class="row">
                    <div class="mb-3">
                        <form id="formInfo">
                            <label for="newLabel" class="form-label">Cambiar etiqueta:</label>
                            <textarea class="form-control" id="newInfo" rows="3"
                                placeholder="Escriba el nuevo nombre de la etiqueta"></textarea>
                            <button type="submit" class="btn btn-primary mt-2">Cambiar etiqueta</button>
                        </form>
                    </div>
                </div>
            </div>
    </div>
    <div class="row">
        <hr class="my-4">
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Información útil</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h2>Accesibilidad de formularios según las pautas de la WCAG</h2>
                <p>Las Pautas de Accesibilidad para el Contenido Web (WCAG) proporcionan varias recomendaciones para
                    hacer que los formularios sean más accesibles. Algunas de estas recomendaciones incluyen:</p>
                <ul>
                    <li><strong>Etiquetas descriptivas:</strong> Cada campo de entrada debe tener una etiqueta que
                        describa claramente su propósito. Esto ayuda a las personas que utilizan lectores de pantalla y
                        a las personas con dificultades cognitivas a entender qué se espera que ingresen en cada campo.
                    </li>
                    <li><strong>Indicación de campos obligatorios:</strong> Si un campo es obligatorio, esto debe
                        indicarse claramente. Esto puede hacerse mediante el uso de la palabra "obligatorio" en la
                        etiqueta del campo, o mediante el uso de un asterisco y una nota que explique que los campos
                        marcados con un asterisco son obligatorios.</li>
                    <li><strong>Mensajes de error claros:</strong> Si el usuario comete un error al rellenar el
                        formulario, debe recibir un mensaje de error claro que le indique qué ha hecho mal y cómo puede
                        corregirlo.</li>
                    <li><strong>Orden lógico:</strong> Los campos de entrada deben estar ordenados de manera lógica.
                        Esto puede ser de arriba a abajo y de izquierda a derecha para las personas que leen en idiomas
                        que se escriben de esta manera.</li>
                </ul>
                <p>En este desafío, debes mejorar las etiquetas de los campos de entrada para hacerlas más descriptivas
                    y comprensibles, y asegurarte de que el formulario cumple con estas pautas de accesibilidad.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>

            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js" integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+" crossorigin="anonymous"></script>
<script>
     var perceptibilidad = [
        '/challenges/contrastChallenge',
        '/challenges/contrastChallenge2',
        '/challenges/altChallenge',
        '/challenges/subtitlesChallenge',
    ];
    var operabilidad = [
        '/challenges/structureChallenge',
        '/challenges/structureChallenge2',
    ];
    var comprensibilidad = [
        '/challenges/formChallenge',
        '/challenges/formChallenge2',
    ];
    var robustez = [
        '/challenges/altChallenge2',
        '/challenges/keyboardChallenge',
        '/challenges/fontSizeChallenge',
    ];

    // Almacena los desafíos que el usuario ya ha jugado en el almacenamiento local
    var playedChallenges = JSON.parse(localStorage.getItem('playedChallenges')) || [];

    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
    'use strict'

    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.querySelectorAll('.needs-validation')

    // Loop over them and prevent submission
    Array.prototype.slice.call(forms)
        .forEach(function (form) {
        form.addEventListener('submit', function (event) {
            if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
            }

            form.classList.add('was-validated')
        }, false)
        })
    })();

    var numbers = [1, 2, 3, 4];
    var randomNumbers = [];
    for (var i = 0; i < 2; i++) {
        var randomIndex = Math.floor(Math.random() * numbers.length);
        randomNumbers.push(numbers[randomIndex]);
    }   
    document.getElementById('campo'+randomNumbers[0]).textContent = 'Error';
    document.getElementById('campo'+randomNumbers[1]).textContent = 'Error';
    console.log(randomNumbers);

    document.getElementById('formInfo').addEventListener('submit', function(event) {
    // Prevenir el comportamiento predeterminado del formulario
    event.preventDefault();

    // Obtener el texto introducido en el textarea
    var inputText = document.getElementById('newInfo').value.trim();

    // Utilizar una expresión regular para extraer el número de la etiqueta y el nuevo nombre de la etiqueta
    var match = inputText.match(/<div class="invalid-feedback" id="campo(\d+)">(.*?)<\/div>/);
    if (match) {
        // Obtener el número de la etiqueta y el nuevo nombre de la etiqueta
        var infoNumber = match[1];
        var newInfo = match[2];

        // Construir el ID de la etiqueta
        var infoId = 'campo' + infoNumber;

        // Obtener la etiqueta con el ID construido
        var inf = document.getElementById(infoId);

        // Actualizar el texto de la etiqueta con el nuevo nombre de la etiqueta
        if (verificarMensajesError(newInfo))
        {
            inf.textContent = newInfo;
            document.getElementById('newInfo').value = '';
            document.getElementById('alarm').innerHTML = '<div class="alert alert-success" role="alert">¡Etiqueta actualizada con éxito!</div>';
        }
        else
        {
            document.getElementById('newInfo').value = '';
            //document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">Por favor, introduce un mensaje de error descriptivo.</div>';
        }
        } else {
        // Mostrar un mensaje de error si el texto introducido en el textarea no sigue el formato esperado
        document.getElementById('newInfo').value = '';
        document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">Por favor, introduce el nuevo nombre de la etiqueta en el formato correcto.</div>';
    }

});

function winCondition(){
    var men1 = document.getElementById('campo1').textContent;
    var men2 = document.getElementById('campo2').textContent;
    var men3 = document.getElementById('campo3').textContent;
    var men4 = document.getElementById('campo4').textContent;
    if (men1 !== 'Error' && men2 !== 'Error' && men3 !== 'Error' && men4 !== 'Error') {
        return true;
    }
    return false;
}
function checkChallengeCompletion() {
    if (winCondition()) {
        document.getElementById('alarm').innerHTML = '<div class="alert alert-success" role="alert">¡Desafío completado con éxito!</div>';
        document.getElementById('next').style.display = 'block';
        var newScore = obtenerPuntuación(timerValueWhenConditionMet);
        var currentScore = parseInt(localStorage.getItem('score'));
        var totalScore = currentScore + newScore;
        localStorage.setItem('score', totalScore);
        clearInterval(timerInterval);
        clearInterval(checkInterval);
    }
}

function nextChallenge() {
        document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">Avanzando al siguiente desafío</div>';
        if (!playedChallenges.includes(window.location.pathname)) {
            playedChallenges.push(window.location.pathname);
            localStorage.setItem('playedChallenges', JSON.stringify(playedChallenges));
        }
        if (playedChallenges.length < 4) {

            // Genera un número aleatorio entre 0 y el número de desafíos restantes
            var nextChallengeIndex = Math.floor(Math.random() * robustez.length);

            // Redirige al usuario al desafío seleccionado
            var nextChallenge = robustez[nextChallengeIndex];
            window.location.href = nextChallenge;
        } else {
            document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">¡Desafío completado con éxito! Con puntuación de ' + totalScore + '</div>';
            // Borra la lista de desafíos jugados
            playedChallenges = [];
            localStorage.removeItem('playedChallenges');
            if (totalScore > {{ highscore }} ) {
            fetch('/challenges/updateHighscore', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    highscore: totalScore,
                }),
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Highscore updated:', data);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        }
        localStorage.setItem('score', 0);
        window.location.href = "/";
    }   
    }

function verificarMensajesError(mensajeError) {
    // Obtener los mensajes de error
    // Definir los criterios
    var longitudMinima = 10;
    var palabrasClave = ['obligatorio', 'inválido', 'requerido', 'incorrecto', 'formato', 'confirme'];
    var mensajeErrorPredeterminado = 'Error';

    // Verificar la longitud
    if (mensajeError.length < longitudMinima) {
        document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">Los mensajes de error deben tener al menos ' + longitudMinima + ' caracteres.</div>';
        return false;
    }

    // Verificar las palabras clave
    var contienePalabraClave = palabrasClave.some(function(palabraClave) {
        return mensajeError.includes(palabraClave);
    });
    if (!contienePalabraClave) {
        console.log('Los mensajes de error deben contener al menos una de las siguientes palabras clave: ' + palabrasClave.join(', '));
        document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">Los mensajes de error deben contener al menos una de las siguientes palabras clave: ' + palabrasClave.join(', ') +'.</div>';
        return false;
    }

    // Verificar si los mensajes de error son diferentes del predeterminado
    if (mensajeError === mensajeErrorPredeterminado) {
        document.getElementById('alarm').innerHTML = '<div class="alert alert-danger" role="alert">Los mensajes de error deben ser diferentes del mensaje de error predeterminado.</div>';
        return false;
    }
    // Si se cumplen todos los criterios, devolver true
    return true;
}
// Comprobar la finalización del desafío cada segundo
var checkInterval = setInterval(checkChallengeCompletion, 2000);

var startTime, timerInterval, timerValueWhenConditionMet;

    function obtenerPuntuación(timerTriggered) {
        return Math.floor(1000 / timerTriggered);
    }



    function updateTimer() {

        var currentTime = Date.now();
        var elapsedTime = Math.floor((currentTime - startTime) / 1000);
        timerValueWhenConditionMet = elapsedTime;


        document.getElementById("timer-container").innerText = 'Tiempo de partida: ' + elapsedTime + ' segundos';
    }
    document.getElementById("score-container").innerText = 'Puntuación: ' + localStorage.getItem('score');

    function startTimer() {
        // Guarda el tiempo de inicio
        startTime = Date.now();

        // Inicia el temporizador para que llame a updateTimer cada 1000 milisegundos (1 segundo)
        timerInterval = setInterval(updateTimer, 1000);
    }

    // Inicia el temporizador cuando se carga la página
    startTimer();
</script>