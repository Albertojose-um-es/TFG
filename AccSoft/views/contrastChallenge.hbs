<div class="container ">
    <div class="py-5 d-flex justify-content-center">
        <div class="col-md-10">
            <h1>Desafío sobre el contraste de color</h1>
        </div>
        <div class="col-md-2 p-1">
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal">
                ¿Necesitas ayuda?
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="div" id="timer-container"></div>
        </div>
        <div class="col-md-4">
            <div class="div" id="score-container"></div>
        </div>
        <div class="col-md-4">
            <p id="highscore">Máxima puntuación: {{highscore}}</p>
        </div>
    </div>
    <div class="row py-5">
        <div class="col-md-5">
            <div class="row">
                <h5 class="text ">El botón "Iniciar sesión" en la página de inicio tiene un contraste de color
                    insuficiente, lo que dificulta su lectura para personas con discapacidad visual.
                </h5>
            </div>
            <div class="row py-2">
                <h5>Ajusta los estilos CSS para mejorar el contraste y hacer que el texto sea más legible.</h5>
            </div>
            <div class="row py-5">
                <button class="btn btn-lg btn-primary" onclick="applyCss()">Aplicar CSS</button>
            </div>
        </div>
        <div class="col-md-5 d-flex justify-content-center px-3">
            <textarea id="editor" rows="10" cols="30">
    color: white;
    background-color: lightgray;
            </textarea>
        </div>
    </div>
    <!-- Button trigger modal -->


    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Información útil</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Según las pautas de accesibilidad WCAG 2.0, el contraste mínimo recomendado para el texto
                        es
                        de
                        <b>4.5:1</b>. Esto significa que el color del texto y el color de fondo deben diferir lo
                        suficiente para
                        que las personas con discapacidad visual puedan leer el texto fácilmente.
                    </p>

                    <p>Por ejemplo, si el color de fondo es blanco (#FFFFFF), el color del texto debe ser al
                        menos
                        gris
                        oscuro (#767676) para cumplir con las pautas de contraste.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>

                </div>
            </div>
        </div>
    </div>
    <div class="row py-5  d-flex justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Iniciar Sesión</h3>
                </div>
                <div class="card-body">
                    <form>
                        <div class="form-group">
                            <label for="email">Correo Electrónico</label>
                            <input type="email" class="form-control" id="email"
                                placeholder="Ingresa tu correo electrónico">
                        </div>
                        <div class="form-group">
                            <label for="password">Contraseña</label>
                            <input type="password" class="form-control" id="password"
                                placeholder="Ingresa tu contraseña">
                        </div>
                        <button class="btn btn-lg" id='login-button'
                            style='color: white; background-color: lightgray;'>Iniciar sesión</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>



<script>

    var challenges = [
        '/challenges/contrastChallenge',
        '/challenges/contrastChallenge2',
        '/challenges/altChallenge',
        '/challenges/altChallenge2',
        '/challenges/structureChallenge',
        '/challenges/structureChallenge2',
    ];

    // Almacena los desafíos que el usuario ya ha jugado en el almacenamiento local
    var playedChallenges = JSON.parse(localStorage.getItem('playedChallenges')) || [];
    var colorNames = {
        "black": "#000000",
        "white": "#ffffff",
        "red": "#ff0000",
        "lime": "#00ff00",
        "blue": "#0000ff",
        "lightblue": "#add8e6",
        "darkblue": "#00008b",
        "yellow": "#ffff00",
        "darkyellow": "#bba400",
        "cyan": "#00ffff",
        "magenta": "#ff00ff",
        "silver": "#c0c0c0",
        "gray": "#808080",
        "darkgray": "#767676",
        "lightgray": "#d3d3d3",
        "maroon": "#800000",
        "olive": "#808000",
        "green": "#008000",
        "darkgreen": "#006400",
        "lightgreen": "#90ee90",
        "purple": "#800080",
        "teal": "#008080",
        "navy": "#000080"
    };

    function getColorHex(color) {
        if (color.indexOf('#') === 0) {
            return color;  // Ya es un color hexadecimal
        } else if (colorNames[color.toLowerCase()]) {
            return colorNames[color.toLowerCase()];  // Convertir el nombre del color a hexadecimal
        } else {
            return null;  // Color desconocido
        }
    }


    function applyCss() {
        var css = document.getElementById('editor').value;
        var productLink = document.getElementById('login-button');
        productLink.style = css;

        // Extrae los colores del CSS
        var colorMatch = css.match(/color:\s*([^;]+)/);
        var backgroundColorMatch = css.match(/background-color:\s*([^;]+)/);

        if (colorMatch && backgroundColorMatch) {
            // Convierte los colores a formato hexadecimal
            var colorHex = getColorHex(colorMatch[1]);
            var backgroundColorHex = getColorHex(backgroundColorMatch[1]);

            if (colorHex && backgroundColorHex) {
                // Calcula el contraste entre los colores
                var contrast = getContrast(colorHex, backgroundColorHex);

                if (contrast >= 4.5) {
                    setTimeout(function () {
                        var timerValueWhenConditionMet = elapsedTime;
                        clearInterval(timerInterval);

                        alert('¡Desafío completado con éxito!');
                        if (!playedChallenges.includes(window.location.pathname)) {
                            playedChallenges.push(window.location.pathname);
                            localStorage.setItem('playedChallenges', JSON.stringify(playedChallenges));
                        }
                        if (playedChallenges.length < 3 && confirm('¿Quieres avanzar al siguiente desafío?')) {
                            alert('Avanzando al siguiente desafío...');

                            // Filtra los desafíos para excluir los que el usuario ya ha jugado
                            var remainingChallenges = challenges.filter(challenge => !playedChallenges.includes(challenge));

                            // Genera un número aleatorio entre 0 y el número de desafíos restantes
                            var nextChallengeIndex = Math.floor(Math.random() * remainingChallenges.length);

                            // Redirige al usuario al desafío seleccionado
                            var nextChallenge = remainingChallenges[nextChallengeIndex];
                            window.location.href = nextChallenge;
                        } else {
                            alert('Has jugado tres desafíos en esta partida. ¡Felicidades!');
                            // Borra la lista de desafíos jugados
                            playedChallenges = [];
                            localStorage.removeItem('playedChallenges');
                            window.location.href = "/";
                        }
                    }, 2000); // Retrasa la alerta y las acciones subsiguientes en 2 segundos
                } else {
                    alert('El contraste no es suficiente');
                }
            } else {
                alert('Uno de los colores no se reconoce');
            }
        } else {
            alert('No se pudo encontrar el color o el color de fondo en el CSS');
        }
    }

    function getLuminance(r, g, b) {
        var a = [r, g, b].map(function (v) {
            v /= 255;
            return v <= 0.03928
                ? v / 12.92
                : Math.pow((v + 0.055) / 1.055, 2.4);
        });
        return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
    }

    function getContrast(hexcolor1, hexcolor2) {
        var rgb1 = hexToRgb(hexcolor1);
        var rgb2 = hexToRgb(hexcolor2);
        var luminance1 = getLuminance(rgb1.r, rgb1.g, rgb1.b);
        var luminance2 = getLuminance(rgb2.r, rgb2.g, rgb2.b);
        var contrast = (Math.max(luminance1, luminance2) + 0.05) / (Math.min(luminance1, luminance2) + 0.05);
        return contrast;
    }

    function hexToRgb(hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }
</script>
<script>
    // Variables para el tiempo de inicio y el intervalo del temporizador
    var startTime, timerInterval;

    // Función para actualizar el temporizador
    function updateTimer() {
        // Calcula el tiempo transcurrido
        var currentTime = Date.now();
        var elapsedTime = Math.floor((currentTime - startTime) / 1000);

        // Muestra el tiempo transcurrido en el elemento con el ID "timer-container"
        document.getElementById("timer-container").innerText = 'Tiempo de partida: ' + elapsedTime + ' segundos';
    }

    // Función para iniciar el temporizador
    function startTimer() {
        // Guarda el tiempo de inicio
        startTime = Date.now();

        // Inicia el temporizador para que llame a updateTimer cada 1000 milisegundos (1 segundo)
        timerInterval = setInterval(updateTimer, 1000);
    }

    // Inicia el temporizador cuando se carga la página
    startTimer();
</script>