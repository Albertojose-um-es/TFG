<div class="container">
    <div class="py-5 d-flex justify-content-center">
        <div class="col-md-10">
            <h1>Desafío sobre la Perceptibilidad</h1>
        </div>
        <div class="col-md-2 p-1">
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal">
                ¿Necesitas ayuda?
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="div" id="timer-container"></div>
        </div>
        <div class="col-md-4">
            <div class="div" id="score-container"></div>
        </div>
        <div class="col-md-4">
            <p id="highscore">Máxima puntuación: {{highscore}}</p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div id="alarm" class="d-flex justify-content-center text-center"></div>
        </div>
        <div class="col-md-4">
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary" id="next"  style="display: none;" onclick="nextChallenge()">Siguiente desafío</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h6 class="text">En una página de noticias, hay un enlace de "Leer más" con texto azul sobre un fondo verde
                oscuro. El contraste entre el texto y el fondo no cumple con los estándares de accesibilidad. Debes modificar los
                estilos CSS para mejorar el contraste y hacer que el enlace sea más visible.</h6>
            <textarea id="editor" rows="3" cols="10" class="form-control py-3">
            color: blue;
            background-color: darkgreen;
            </textarea>
            <button  id="aplicarCss" onclick="applyCss()" class="btn btn-primary py-3 m-3" style="width: 500px;">Aplicar CSS</button>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h2 class="text-center">Datos sobre Accesibilidad</h2>
                </div>
                <div class="card-body">
                    <p class="text" id="textDesafio">
                       
                    </p>
                    <p class="collapse" id="textoAdicional">
                        Phasellus fringilla sapien nec urna laoreet, vitae ullamcorper libero tempor. In hac habitasse
                        platea
                        dictumst. Nulla pharetra metus vel odio molestie, a scelerisque est sagittis. Vivamus nec quam
                        id
                        orci tincidunt venenatis id eget urna. Sed vitae velit in lectus vehicula dapibus. Mauris
                        malesuada
                        commodo enim, a condimentum ipsum pulvinar eget. Vestibulum faucibus, mauris ac accumsan
                        suscipit, turpis nulla dapibus arcu, id eleifend eros eros vitae nulla. In vehicula, magna nec
                        sagittis malesuada, enim eros feugiat orci, id gravida felis turpis in elit. Sed vitae tortor
                        eget
                        sapien interdum lobortis nec et turpis. Phasellus auctor arcu leo, id consectetur arcu eleifend
                        vitae. Nullam congue commodo justo, id vehicula purus auctor vitae. Proin sed velit sapien.
                    </p>
                    <a href="#" class="link-underline-primary" id='product-link'
                        style='color: blue; background-color: darkgreen;'>Leer más</a>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Información útil</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Según las pautas de accesibilidad WCAG 2.0, el contraste mínimo recomendado para el texto es de
                    <b>4.5:1</b>. Esto significa que el color del texto y el color de fondo deben diferir lo suficiente
                    para
                    que las personas con discapacidad visual puedan leer el texto fácilmente.
                </p>

                <p>Por ejemplo, si el color de fondo es blanco (#FFFFFF), el color del texto debe ser al menos gris
                    oscuro (#767676) para cumplir con las pautas de contraste.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>

            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>

   
<script>

    var perceptibilidad = [
        '/challenges/contrastChallenge',
        '/challenges/contrastChallenge2',
        '/challenges/altChallenge',
        '/challenges/subtitlesChallenge',
    ];
    var operabilidad = [
        '/challenges/structureChallenge',
        '/challenges/structureChallenge2',
    ];
    var comprensibilidad = [
        '/challenges/formChallenge',
        '/challenges/formChallenge2',
    ];
    var robustez = [
        '/challenges/altChallenge2',
        '/challenges/keyboardChallenge',
    ];

    // Almacena los desafíos que el usuario ya ha jugado en el almacenamiento local
    var playedChallenges = JSON.parse(localStorage.getItem('playedChallenges')) || [];
    var colorNames = {
        "black": "#000000",
        "white": "#ffffff",
        "red": "#ff0000",
        "lime": "#00ff00",
        "blue": "#0000ff",
        "lightblue": "#add8e6",
        "darkblue": "#00008b",
        "yellow": "#ffff00",
        "darkyellow": "#bba400",
        "cyan": "#00ffff",
        "magenta": "#ff00ff",
        "silver": "#c0c0c0",
        "gray": "#808080",
        "darkgray": "#767676",
        "lightgray": "#d3d3d3",
        "maroon": "#800000",
        "olive": "#808000",
        "green": "#008000",
        "darkgreen": "#006400",
        "lightgreen": "#90ee90",
        "purple": "#800080",
        "teal": "#008080",
        "navy": "#000080"
    };

    function getColorHex(color) {
        if (color.indexOf('#') === 0) {
            return color;  // Ya es un color hexadecimal
        } else if (colorNames[color.toLowerCase()]) {
            return colorNames[color.toLowerCase()];  // Convertir el nombre del color a hexadecimal
        } else {
            return null;  // Color desconocido
        }
    }

     var textos = [
    "La accesibilidad del software es fundamental para garantizar que todas las personas, independientemente de sus capacidades, puedan utilizar y disfrutar de una aplicación o sitio web.",
    "Al diseñar interfaces de usuario accesibles, es importante considerar aspectos como el contraste de color, el tamaño de fuente, la navegación por teclado y el uso de etiquetas adecuadas para los elementos interactivos.",
    "Las pautas de accesibilidad, como las WCAG, proporcionan recomendaciones y estándares para crear experiencias digitales accesibles. Es importante seguir estas pautas para garantizar la inclusión de todas las personas.",
    "Además del contraste de color, también es importante considerar el contraste de luminosidad entre los elementos de una interfaz. Esto puede ayudar a mejorar la legibilidad y la comprensión de la información.",
    "Las tecnologías de asistencia, como los lectores de pantalla y los teclados alternativos, son herramientas clave para que las personas con discapacidades puedan interactuar con aplicaciones y sitios web. Es importante asegurarse de que la interfaz sea compatible con estas tecnologías.",
    "La accesibilidad no solo se trata de cumplir con las regulaciones y estándares, sino de crear una experiencia inclusiva y amigable para todos los usuarios. Al considerar la accesibilidad desde el inicio del proceso de desarrollo, se pueden evitar problemas y mejorar la experiencia para todos.",
    "La accesibilidad es un proceso continuo. Es importante realizar pruebas de accesibilidad regularmente y realizar ajustes según sea necesario para garantizar que la aplicación o sitio web siga siendo accesible a medida que se realicen cambios y actualizaciones.",
    "La educación y la conciencia sobre la accesibilidad son fundamentales para fomentar un enfoque inclusivo en el desarrollo de software. Al aprender sobre las necesidades y experiencias de las personas con discapacidades, se pueden tomar decisiones informadas para mejorar la accesibilidad.",
    "La accesibilidad no solo beneficia a las personas con discapacidades, sino que también puede mejorar la experiencia de todos los usuarios. Al crear interfaces intuitivas y fáciles de usar, se puede mejorar la usabilidad y la satisfacción del usuario en general.",
    "¿Sabías que aproximadamente el 15% de la población mundial vive con algún tipo de discapacidad? La accesibilidad del software es crucial para garantizar que todos puedan utilizar la tecnología.",
    "La accesibilidad del software no solo beneficia a las personas con discapacidades. Las características de accesibilidad también pueden ser útiles para las personas mayores, las personas con lesiones temporales o incluso las personas que están utilizando dispositivos con pantallas pequeñas o en entornos con mucha luz solar.",
    "El contraste de color adecuado es una parte importante de la accesibilidad del software. Un contraste de color insuficiente puede hacer que el texto sea difícil de leer para las personas con discapacidades visuales, pero también para las personas con visión normal en ciertas condiciones de iluminación.",
    "¿Sabías que el estándar mínimo de contraste de color para el texto normal es 4.5:1, según las Pautas de Accesibilidad al Contenido en la Web (WCAG)? Para el texto de gran tamaño, el estándar es un poco más bajo, a 3:1.",
    "Las pruebas de accesibilidad son una parte importante del desarrollo de software. Herramientas como las auditorías de accesibilidad de Lighthouse en Chrome DevTools pueden ayudar a identificar y corregir problemas de accesibilidad en tu sitio web o aplicación.",
    ];

    window.onload = function() {

    var textoAleatorio = textos[Math.floor(Math.random() * textos.length)];
    var texto = document.getElementById('textDesafio');
    texto.innerHTML = textoAleatorio;
};

    function applyCss() {
        var css = document.getElementById('editor').value;
        var productLink = document.getElementById('product-link');
        productLink.style = css;

        // Extrae los colores del CSS
        var colorMatch = css.match(/color:\s*([^;]+)/);
        var backgroundColorMatch = css.match(/background-color:\s*([^;]+)/);

        if (colorMatch && backgroundColorMatch) {
            // Convierte los colores a formato hexadecimal
            var colorHex = getColorHex(colorMatch[1]);
            var backgroundColorHex = getColorHex(backgroundColorMatch[1]);

            if (colorHex && backgroundColorHex) {
                // Calcula el contraste entre los colores
                var contrast = getContrast(colorHex, backgroundColorHex);

                if (contrast >= 4.5) {
                    setTimeout(function () {
                        var newScore = obtenerPuntuación(timerValueWhenConditionMet);
                        var currentScore = parseInt(localStorage.getItem('score'));
                        var totalScore = currentScore + newScore;
                        localStorage.setItem('score', totalScore);
                        clearInterval(timerInterval);
                        document.getElementById("score-container").innerText = 'Puntuación: ' + totalScore;
                        document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">¡Desafío completado con éxito! Con puntuación de ' + totalScore + '</div>';
                        document.getElementById("next").style.display = 'block';

                    }, 1000); // Retrasa la alerta para que el usuario pueda ver la solución
                } else {
                    document.getElementById("alarm").innerHTML = '<div class="alert alert-danger" role="alert">El contraste entre el color del texto y el color de fondo no es suficiente. Por favor, ajusta los estilos CSS para mejorar el contraste.</div>';
                }
            } else {
                document.getElementById("alarm").innerHTML = '<div class="alert alert-danger" role="alert">No se pudo encontrar el color o el color de fondo en el CSS</div>';
            }
        } else {
            document.getElementById("alarm").innerHTML = '<div class="alert alert-danger" role="alert">No se pudo encontrar el color o el color de fondo en el CSS</div>';
        }
    }

    function nextChallenge() {
        if (!playedChallenges.includes(window.location.pathname)) {
            playedChallenges.push(window.location.pathname);
            localStorage.setItem('playedChallenges', JSON.stringify(playedChallenges));
        }
        if (playedChallenges.length < 4) {
            //document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">Avanzando al siiguiente desafío</div>';

            // Filtra los desafíos para excluir los que el usuario ya ha jugado
            //var remainingChallenges = challenges.filter(challenge => !playedChallenges.includes(challenge));

            // Genera un número aleatorio entre 0 y el número de desafíos restantes
            var nextChallengeIndex = Math.floor(Math.random() * operabilidad.length);

            // Redirige al usuario al desafío seleccionado
            var nextChallenge = operabilidad[nextChallengeIndex];
            window.location.href = nextChallenge;
        } else {
            document.getElementById("alarm").innerHTML = '<div class="alert alert-success" role="alert">¡Desafío completado con éxito! Con puntuación de ' + totalScore + '</div>';
            // Borra la lista de desafíos jugados
            playedChallenges = [];
            localStorage.removeItem('playedChallenges');
            if (totalScore > {{ highscore }} ) {
            fetch('/challenges/updateHighscore', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    highscore: totalScore,
                }),
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Highscore updated:', data);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        }
        localStorage.setItem('score', 0);
        window.location.href = "/";
    }
        
    }



    function getLuminance(r, g, b) {
        var a = [r, g, b].map(function (v) {
            v /= 255;
            return v <= 0.03928
                ? v / 12.92
                : Math.pow((v + 0.055) / 1.055, 2.4);
        });
        return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
    }

    function getContrast(hexcolor1, hexcolor2) {
        var rgb1 = hexToRgb(hexcolor1);
        var rgb2 = hexToRgb(hexcolor2);
        var luminance1 = getLuminance(rgb1.r, rgb1.g, rgb1.b);
        var luminance2 = getLuminance(rgb2.r, rgb2.g, rgb2.b);
        var contrast = (Math.max(luminance1, luminance2) + 0.05) / (Math.min(luminance1, luminance2) + 0.05);
        return contrast;
    }

    function hexToRgb(hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }

    function obtenerPuntuación(timerTriggered) {
        return Math.floor(1000 / timerTriggered);
    }

</script>
<script>

    var startTime, timerInterval, timerValueWhenConditionMet;


    function updateTimer() {

        var currentTime = Date.now();
        var elapsedTime = Math.floor((currentTime - startTime) / 1000);
        timerValueWhenConditionMet = elapsedTime;


        document.getElementById("timer-container").innerText = 'Tiempo de partida: ' + elapsedTime + ' segundos';
    }
    document.getElementById("score-container").innerText = 'Puntuación: ' + localStorage.getItem('score');

    function startTimer() {
        // Guarda el tiempo de inicio
        startTime = Date.now();

        // Inicia el temporizador para que llame a updateTimer cada 1000 milisegundos (1 segundo)
        timerInterval = setInterval(updateTimer, 1000);
    }

    // Inicia el temporizador cuando se carga la página
    startTimer();
</script>